# Configuração da URL de conexão com o banco de dados MySQL
spring.datasource.url = jdbc:mysql://localhost:3306/test?allowPublicKeyRetrieval=true&useSSL=false
# - spring.datasource.url: Define a URL de conexão com o banco de dados.
# - jdbc:mysql://localhost:3306/test: O banco de dados está rodando localmente na porta 3306 e o nome do banco de dados é "test".
# - allowPublicKeyRetrieval=true: Permite que a chave pública do servidor seja recuperada, útil em criptografia SSL.
# - useSSL=false: Desativa o uso de SSL para a conexão. Esta configuração é adequada para ambientes de desenvolvimento.

# Nome de usuário e senha para acessar o banco de dados
spring.datasource.username = root
# - spring.datasource.username: Define o nome de usuário do banco de dados. Aqui o valor é "root", que é o padrão para MySQL.

spring.datasource.password = root
# - spring.datasource.password: Define a senha do banco de dados. Aqui também é "root", que é o padrão do MySQL.

# Configuração do JPA e Hibernate para gerenciar o banco de dados
spring.jpa.hibernate.ddl_auto=update
# - spring.jpa.hibernate.ddl_auto: Especifica a política de atualização do schema do banco de dados.
# - update: O Hibernate irá automaticamente atualizar o schema conforme as entidades da aplicação são modificadas (somente em desenvolvimento).

spring.jpa.show-sql=true
# - spring.jpa.show-sql: Habilita a exibição das queries SQL no console. Isso ajuda a visualizar as operações SQL executadas.

# Chave secreta usada para gerar e verificar tokens JWT (JSON Web Tokens)
jwt.secret=3a2dafe88dea466b808115aaa61142fe465252118c37fe997094271e046786b1
# - jwt.secret: Chave secreta usada para assinar tokens JWT. Essa chave deve ser segura, pois comprometer essa chave compromete a segurança dos tokens.

# Configurações OAuth2 para o login com GitHub
spring.security.oauth2.client.registration.github.client-id=Ov23livdamvWdWFqURfq
# - spring.security.oauth2.client.registration.github.client-id: ID do cliente OAuth2 fornecido pelo GitHub ao registrar a aplicação.
# - Esse ID é usado pelo GitHub para identificar a aplicação que está solicitando a autenticação.

spring.security.oauth2.client.registration.github.client-secret=
# - spring.security.oauth2.client.registration.github.client-secret: O segredo do cliente (client secret) que autentica a aplicação no GitHub.
# - Neste exemplo, o valor está vazio, provavelmente por motivos de segurança.

# URLs do provedor OAuth2 (GitHub)
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
# - spring.security.oauth2.client.provider.github.authorization-uri: URL onde os usuários são redirecionados para autorizar a aplicação no GitHub.
# - A aplicação redireciona o usuário para essa URL quando ele tenta se autenticar via GitHub.

spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
# - spring.security.oauth2.client.provider.github.token-uri: URL onde a aplicação troca o código de autorização por um token de acesso do GitHub.
# - Após a autorização do usuário, a aplicação faz uma requisição para essa URL para obter o token de acesso.

spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
# - spring.security.oauth2.client.provider.github.user-info-uri: URL usada para obter as informações do usuário autenticado no GitHub.
# - Com o token de acesso, a aplicação faz uma requisição para essa URL para obter informações como nome de usuário, email, etc.
